package com.example.timereportcalculator.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.platform.LocalUriHandler
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp

@Composable
fun HomeScreen() {
    val uriHandler = LocalUriHandler.current
    
    LazyColumn(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        item {
            // Welcome header
            Card(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(12.dp),
                backgroundColor = MaterialTheme.colors.primary.copy(alpha = 0.1f)
            ) {
                Column(
                    modifier = Modifier.padding(20.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    Text(
                        text = "V√§lkommen till Tidrapportskalkylatorn!",
                        style = MaterialTheme.typography.h5,
                        fontWeight = FontWeight.Bold,
                        textAlign = TextAlign.Center,
                        color = MaterialTheme.colors.primary
                    )
                    Text(
                        text = "Din kompletta guide f√∂r l√∂neber√§kningar inom handel och lager",
                        style = MaterialTheme.typography.body1,
                        textAlign = TextAlign.Center,
                        modifier = Modifier.padding(top = 8.dp),
                        color = MaterialTheme.colors.onSurface.copy(alpha = 0.7f)
                    )
                }
            }
        }
        
        item {
            // About section
            InfoCard(
                title = "Om Tidrapportskalkylatorn",
                content = "Tidrapportskalkylatorn √§r ett kostnadsfritt verktyg som hj√§lper dig att snabbt och enkelt ber√§kna din l√∂n, inklusive OB-till√§gg och andra till√§gg som du har r√§tt till enligt g√§llande kollektivavtal. Verktyget √§r speciellt anpassat f√∂r dig som arbetar inom butik och lager, och f√∂ljer reglerna i Handelsanst√§lldas f√∂rbunds kollektivavtal.\n\nOavsett om du arbetar deltid eller heltid, kv√§llar eller helger, s√• kan du enkelt f√• en √∂verblick √∂ver din f√∂rv√§ntade l√∂n och vilka till√§gg du b√∂r f√• f√∂r dina arbetstider."
            )
        }
        
        item {
            // Features section
            FeatureCard(
                title = "Vad kan appen hj√§lpa dig med?",
                features = listOf(
                    FeatureItem(Icons.Default.Calculate, "Grundl√∂neber√§kning", "Ber√§kna din grundl√∂n baserat p√• dina arbetstider och timl√∂n"),
                    FeatureItem(Icons.Default.NightlightRound, "OB-till√§gg", "Automatisk ber√§kning av kv√§lls-, natt-, helg- och s√∂ndagstill√§gg"),
                    FeatureItem(Icons.Default.CalendarToday, "Semester och semesterl√∂n", "F√• √∂versikt √∂ver intj√§nad semester och semesterers√§ttning"),
                    FeatureItem(Icons.Default.Settings, "Flexibla ber√§kningar", "Anpassa ber√§kningarna efter dina specifika arbetstider"),
                    FeatureItem(Icons.Default.TouchApp, "Enkelt att anv√§nda", "Intuitiv design som g√∂r ber√§kningarna snabba och tydliga")
                )
            )
        }
        
        item {
            // Rights and information section
            InfoCard(
                title = "Viktig Information f√∂r Dig som Anst√§lld",
                content = "Som anst√§lld har du r√§ttigheter och det √§r viktigt att du k√§nner till dem. H√§r nedan hittar du information som kan vara till stor hj√§lp om du har fr√•gor kring ditt arbete, l√∂n, arbetstider eller andra anst√§llningsvillkor."
            )
        }
        
        item {
            // Collective agreements
            InfoExpandableCard(
                title = "ü§ù Kollektivavtal",
                content = "Kollektivavtalen √§r √∂verenskommelser mellan fackf√∂rbund och arbetsgivare som reglerar anst√§llningsvillkor som l√∂n, arbetstider, OB-till√§gg, semester, sjukfr√•nvaro och upps√§gningstider. De √§r grunden f√∂r din trygghet och r√§ttigheter p√• jobbet.",
                details = listOf(
                    "F√∂r dig som jobbar i butik eller p√• lager/e-handel g√§ller oftast Handelns Kollektivavtal mellan Handelsanst√§lldas f√∂rbund och Svensk Handel.",
                    "I avtalet hittar du information om minimil√∂ner, arbetstidsregler, OB-till√§gg och mycket mer."
                ),
                linkText = "Handelns Kollektivavtal",
                linkUrl = "https://www.handels.se/dina-avtal/handelns-kollektivavtal/"
            )
        }
        
        item {
            // Trade unions
            InfoExpandableCard(
                title = "üë• Fackf√∂rbund",
                content = "Ett fackf√∂rbund arbetar f√∂r att skydda och f√∂rb√§ttra medlemmarnas anst√§llningsvillkor. Som medlem f√•r du juridiskt st√∂d, r√•dgivning vid konflikter, och hj√§lp med l√∂nef√∂rhandlingar. Medlemskapet ger dig ocks√• en starkare r√∂st p√• arbetsplatsen.",
                details = listOf(
                    "F√∂r anst√§llda inom butik och lager √§r det prim√§ra fackf√∂rbundet Handelsanst√§lldas f√∂rbund.",
                    "Andra relevanta fackf√∂rbund kan vara Unionen (f√∂r tj√§nstem√§n) eller LO (Landsorganisationen i Sverige).",
                    "Som medlem f√•r du tillg√•ng till juridisk r√•dgivning, l√∂nef√∂rhandlingar och st√∂d vid arbetsplatskonfliker."
                ),
                linkText = "Handelsanst√§lldas f√∂rbund",
                linkUrl = "https://www.handels.se/"
            )
        }
        
        item {
            // Unemployment insurance
            InfoExpandableCard(
                title = "üõ°Ô∏è A-kassa (Arbetsl√∂shetskassa)",
                content = "A-kassan ger dig ekonomiskt skydd vid arbetsl√∂shet genom inkomstrelaterad ers√§ttning. Det √§r viktigt att vara medlem i en a-kassa f√∂r att f√• b√§ttre ekonomisk trygghet om du skulle bli arbetsl√∂s. Ers√§ttningen √§r betydligt h√∂gre √§n grunders√§ttningen fr√•n Arbetsf√∂rmedlingen.",
                details = listOf(
                    "Om du √§r medlem i Handelsanst√§lldas f√∂rbund kan du ansluta dig till Handels a-kassa.",
                    "Kom ih√•g att det finns karenstider, s√• det √§r bra att bli medlem i god tid innan du eventuellt beh√∂ver det."
                ),
                linkText = "Handels a-kassa",
                linkUrl = "https://handelsakassa.se/"
            )
        }
        
        item {
            // Useful resources
            ResourcesCard()
        }
        
        item {
            // Disclaimer
            Card(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(12.dp),
                backgroundColor = MaterialTheme.colors.error.copy(alpha = 0.1f)
            ) {
                Column(
                    modifier = Modifier.padding(16.dp)
                ) {
                    Text(
                        text = "‚ö†Ô∏è Viktigt att veta",
                        style = MaterialTheme.typography.h6,
                        fontWeight = FontWeight.Bold,
                        color = MaterialTheme.colors.error
                    )
                    Text(
                        text = "Tidrapportskalkylatorn √§r ett hj√§lpverktyg f√∂r uppskattningar. Den ers√§tter inte professionell r√•dgivning eller officiella l√∂nebesked fr√•n din arbetsgivare. Kontrollera alltid dina slutliga l√∂nebesked och tveka inte att kontakta ditt fackf√∂rbund om du har fr√•gor om dina r√§ttigheter eller l√∂nevillkor.",
                        style = MaterialTheme.typography.body2,
                        modifier = Modifier.padding(top = 8.dp)
                    )
                }
            }
        }
    }
}

@Composable
private fun InfoCard(
    title: String,
    content: String
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = title,
                style = MaterialTheme.typography.h6,
                fontWeight = FontWeight.Bold,
                color = MaterialTheme.colors.primary
            )
            Text(
                text = content,
                style = MaterialTheme.typography.body2,
                modifier = Modifier.padding(top = 8.dp)
            )
        }
    }
}

@Composable
private fun FeatureCard(
    title: String,
    features: List<FeatureItem>
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = title,
                style = MaterialTheme.typography.h6,
                fontWeight = FontWeight.Bold,
                color = MaterialTheme.colors.primary
            )
            
            features.forEach { feature ->
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 8.dp),
                    verticalAlignment = Alignment.Top
                ) {
                    Icon(
                        imageVector = feature.icon,
                        contentDescription = null,
                        tint = MaterialTheme.colors.primary,
                        modifier = Modifier
                            .size(24.dp)
                            .padding(end = 8.dp)
                    )
                    Column(
                        modifier = Modifier.weight(1f)
                    ) {
                        Text(
                            text = feature.title,
                            style = MaterialTheme.typography.subtitle2,
                            fontWeight = FontWeight.Bold
                        )
                        Text(
                            text = feature.description,
                            style = MaterialTheme.typography.body2,
                            modifier = Modifier.padding(top = 2.dp)
                        )
                    }
                }
            }
        }
    }
}

@Composable
private fun InfoExpandableCard(
    title: String,
    content: String,
    details: List<String>,
    linkText: String,
    linkUrl: String
) {
    var expanded by remember { mutableStateOf(false) }
    val uriHandler = LocalUriHandler.current
    
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Row(
                modifier = Modifier
                    .fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(
                    text = title,
                    style = MaterialTheme.typography.h6,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.weight(1f)
                )
                IconButton(
                    onClick = { expanded = !expanded }
                ) {
                    Icon(
                        imageVector = if (expanded) Icons.Default.ExpandLess else Icons.Default.ExpandMore,
                        contentDescription = if (expanded) "D√∂lj detaljer" else "Visa detaljer"
                    )
                }
            }
            
            Text(
                text = content,
                style = MaterialTheme.typography.body2,
                modifier = Modifier.padding(top = 8.dp)
            )
            
            if (expanded) {
                details.forEach { detail ->
                    Text(
                        text = "‚Ä¢ $detail",
                        style = MaterialTheme.typography.body2,
                        modifier = Modifier.padding(top = 8.dp, start = 8.dp)
                    )
                }
                
                Button(
                    onClick = { uriHandler.openUri(linkUrl) },
                    modifier = Modifier.padding(top = 12.dp),
                    colors = ButtonDefaults.buttonColors(
                        backgroundColor = MaterialTheme.colors.primary
                    )
                ) {
                    Text(
                        text = linkText,
                        color = Color.White
                    )
                }
            }
        }
    }
}

@Composable
private fun ResourcesCard() {
    val uriHandler = LocalUriHandler.current
    
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(12.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = "üìã Anv√§ndbara Resurser",
                style = MaterialTheme.typography.h6,
                fontWeight = FontWeight.Bold,
                color = MaterialTheme.colors.primary
            )
            
            val resources = listOf(
                "Arbetsmilj√∂verket" to "https://www.arbetsmiljoverket.se/",
                "Diskrimineringsombudsmannen (DO)" to "https://www.do.se/",
                "Arbetsf√∂rmedlingen" to "https://www.arbetsformedlingen.se/",
                "Skatteverket" to "https://www.skatteverket.se/"
            )
            
            resources.forEach { (name, url) ->
                TextButton(
                    onClick = { uriHandler.openUri(url) },
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 2.dp),
                    contentPadding = PaddingValues(4.dp)
                ) {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.Start,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Icon(
                            imageVector = Icons.Default.OpenInBrowser,
                            contentDescription = null,
                            modifier = Modifier.size(16.dp)
                        )
                        Text(
                            text = name,
                            modifier = Modifier.padding(start = 8.dp),
                            style = MaterialTheme.typography.body2
                        )
                    }
                }
            }
        }
    }
}

private data class FeatureItem(
    val icon: ImageVector,
    val title: String,
    val description: String
)